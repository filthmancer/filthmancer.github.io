# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Google Sheets to Json

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["gsheet"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "gsheet"
  cancel-in-progress: false

jobs:
  fetch:
    runs-on: ubuntu-latest
    outputs:
        sheetIds: ${{steps.get_sheets.outputs.result}}
    steps:
      - id: 'get_spreadsheet'
        uses: jroehl/gsheet.action@v2.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: 1Qpz7ZfLaUUra6kEFspyqizCqj0HRC92Zj-CfTG3vXTc
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getSpreadsheet", "args": { }}
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
      - name: "Read JSON"
        uses: actions/github-script@v6
        id: get_sheets
        with:
            result-encoding: string
            script: |
                try {
                    const fs = require('fs')
                    const jsonString = '${{steps.get_spreadsheet.outputs.results}}'
                    var apps = JSON.parse(jsonString)
                    var sheets = apps.results[0].result.sheets
                    var ids = []
                    for (var sheet of sheets)
                    {
                        ids.append(sheet.properties.sheetId);
                        console.log(sheet.properties.sheetId)
                    }
                    return JSON.stringify(ids)
                } catch(err) {
                    core.error("Error while reading or parsing the JSON")
                    core.setFailed(err)
                }
      - run: echo "${{steps.get_sheets.outputs.result}}"
    #   - uses: actions/github-script@v7
    #     id: set-result
    #     with:
    #         script: return "Hello!"
    #         result-encoding: string
    #   - id: 'get_sheetIds'
    #     env:
    #         RESULTS: "${{ fromJSON(steps.get_spreadsheet.outputs.results)}}"
    #     run: |
    #         echo $RESULTS
    #         sheets= ${{ fromJSON(steps.get_spreadsheet.outputs.results) }}.results[0].result.sheets
    #         for s in $sheets
    #         do
    #             echo $s
    #         done

  spreadsheets:
    runs-on: ubuntu-latest
    needs: fetch
    steps:
      - id: 'get_worksheet'
        uses: jroehl/gsheet.action@v2.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: 1Qpz7ZfLaUUra6kEFspyqizCqj0HRC92Zj-CfTG3vXTc
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getSpreadsheet", "args": { }}
              { "command": "getWorksheet", "args": { "worksheetTitle": "202412" }},
              { "command": "getData", "args": { "range": "!B1:D4" } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
      - name: dump results
        env:
          #  the output of the action can be found in ${{ steps.get_worksheet.outputs.results }}
          RESULTS: ${{ steps.get_worksheet.outputs.results }}
        run: echo "$RESULTS" | jq